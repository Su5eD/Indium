import me.modmuss50.mpp.ReleaseType

plugins {
	id 'dev.architectury.loom' version '1.3-SNAPSHOT'
	id 'maven-publish'

	id "org.ajoberstar.grgit" version "4.1.0"
	id "me.modmuss50.mod-publish-plugin" version "0.4.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

String getGitVersion(Project project) {
	if (grgit != null) {
		var dirty = grgit.status().clean ? "" : "-dirty"
		// If we're going to create (or have created) a git tag, don't use dev version
		var willCreate = System.getenv("EXPECTED_VERSION") !== null && System.getenv("GITHUB_TOKEN")
		if (willCreate || grgit.describe(tags: true) == "${project.mod_version}+mc${project.minecraft_version}") {
			version = "${project.mod_version}+mc${project.minecraft_version}${dirty}"
		} else {
			version = "${project.mod_version}-dev.${grgit.head().abbreviatedId}+mc${project.minecraft_version}${dirty}"
		}
	} else {
		version = "${project.mod_version}-dev.unknown+mc${project.minecraft_version}"
	}
}

String getChangelog(String githubUrl) {
    def lastTag = grgit.describe(commit: "HEAD~", tags: true)?.replaceAll("-\\d+-[a-z0-9]+\$", "")
    if (lastTag == null) {
        return "Initial Release"
    }
	// Get changes since the last tag
	return grgit.log(includes: ["HEAD"], excludes: [
			// Get the last tag, removing the number of commits since the tag and the current HEAD~ hash
            lastTag
	]).collect {
		"- ${it.shortMessage} (${it.author.name})"
	}.join("\n") + (githubUrl == null ? "" : "\n\nSee the full changes on Github: ${githubUrl}commits/${getGitVersion(project)}")
}

archivesBaseName = project.archives_base_name
version = getGitVersion(project)
group = project.maven_group

loom {
    forge {
        mixinConfig("indium.mixins.json")
    }
    mixin {
        defaultRefmapName.set("indium-refmap.json")
    }
}

repositories {
	maven {
		url = "https://api.modrinth.com/maven"
	}
	maven {
		url = "https://maven.su5ed.dev/releases"
	}
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	forge "net.minecraftforge:forge:${rootProject.forge_version}"

    // Fabric API
	modImplementation "dev.su5ed.sinytra:fabric-loader:${project.ffloader_version}"
    modImplementation "dev.su5ed.sinytra.fabric-api:fabric-renderer-api-v1:${project.fabric_renderer_api_version}"
    modImplementation "dev.su5ed.sinytra.fabric-api:fabric-resource-loader-v0:${project.fabric_resource_loader_version}"
	modImplementation "dev.su5ed.sinytra.fabric-api:fabric-block-view-api-v2:${project.fabric_block_view_api_version}"
    modImplementation "dev.su5ed.sinytra.fabric-api:fabric-rendering-data-attachment-v1:${project.fabric_rendering_data_attachment_version}"

    // For testing in dev environment
    modRuntimeOnly "dev.su5ed.sinytra.fabric-api:fabric-api:${project.ffapi_version}"

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

	modImplementation "maven.modrinth:embeddium:${project.embeddium_version}+mc${project.embeddium_minecraft_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
    from "LICENSE"
	manifest {
		attributes([
				'Implementation-Version': project.version
		])
	}
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

// TODO: infer from fabric.mod.json?!
def supportedVersions = ["${project.minecraft_version}", "1.20.2"]
def verName =  "${project.name} ${project.mod_version} for Minecraft 1.20.x/Embeddium ${project.embeddium_version}"

publishMods {
    file.set(remapJar.archiveFile)
    changelog.set(provider { getChangelog(null) })
    type.set(ReleaseType.STABLE)
    modLoaders.add("forge")
    dryRun.set(!providers.environmentVariable("CI").present)

	if (System.getenv("GITHUB_TOKEN")) {
		github {
            accessToken.set(providers.environmentVariable("GITHUB_TOKEN"))
            repository.set(providers.environmentVariable("GITHUB_REPOSITORY"))
            commitish.set(providers.environmentVariable("GITHUB_REF_NAME"))
        }
    }
    curseforge {
        accessToken.set(providers.environmentVariable("CURSEFORGE_TOKEN"))
        projectId.set(project.curseforge_id)
        minecraftVersions.add(project.minecraft_version)
        changelog.set(provider { getChangelog(project.source_url) })
        displayName.set(verName)
        requires("embeddium", "forgified-fabric-api")
        incompatible("indium")
    }
    modrinth {
        accessToken.set(providers.environmentVariable("MODRINTH_TOKEN"))
        projectId.set(project.modrinth_id)
        minecraftVersions.add(project.minecraft_version)
        changelog.set(provider { getChangelog(project.source_url) })
        displayName.set(verName)
        requires {
            slug.set("embeddium")
            version.set("${project.embeddium_version}+mc${project.embeddium_minecraft_version}")
        }
        requires("forgified-fabric-api")
        incompatible("indium")
    }
}